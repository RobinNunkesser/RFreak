install.packages("~/Downloads/EnQuireR_0.10.tar.gz", repos = NULL, type = "source")
install.packages("Rcmdr")
install.packages("~/Downloads/EnQuireR_0.10.tar.gz", repos = NULL, type = "source")
install.packages("FactoMineR")
install.packages("~/Downloads/EnQuireR_0.10.tar.gz", repos = NULL, type = "source")
install.packages("SensoMineR")
install.packages("~/Downloads/EnQuireR_0.10.tar.gz", repos = NULL, type = "source")
data(tea)
use(EnQuireR)
package(EnquireR)
using(EnquireR)
library(EnQuireR)
data(tea)
ENbarplot(tea,20,numr=1,numc=1)
ENbarplot
barplot_function
ENbarplot
barplot_function(tea,20,spl=FALSE,numr=1,numc=1)
hsv
#Barplot simple
"barplot_function"=function(dataset,X,spl=FALSE,numr=NULL,numc=NULL,cex=1,colour=NULL){      #X=vecteur des variables choisies, numr=nb de lignes de la fenêtre graphique, numc=nb de colonnes de la fenête graphique, col=couleurs
mult=length(X)                                                             #mult=taille de X
col=rep(0)
count_mod<-rep(0)
a<-1/mult
for (m in 1:mult){
if (spl){cont<-sort(table(dataset[,X[m]]))
}
else {cont<-table(dataset[,X[m]])}
NR <- dim(cont) ## on veut le nombre de lignes
count_mod<-c(count_mod,NR)
## permet de diviser la palette de couleurs en autant de couleurs qu'on a de colonnes.
max<-max(cont)
coli<-rep(0,NR)         ## pour chaque colonne de la matrice, on crée un répertoire qui va répertorier les différentes teintes dégradées de la couleur de la colonne i.
for (j in 1:NR){
if (cont[j]==max){
coli[j]<-hsv(h=a*m,s=1,v=1,1)
}
else {
coli[j]<-hsv(h=a*m,s=0.4+(cont[j]/max)*0.6,v=1,1) ## pour toutes les colonnes, on fait comme expliqué 13 lignes plus haut
}
}
col<-c(col,coli)
}
col<-col[-1]
count_mod<-count_mod[-1]
summ<-cumsum(count_mod)
na=matrix(0,1,mult)                                                        #création d'une matrice nulle
if (is.null(numr)){                                                        #si numr et numc non précisée, 2 et 2 par défaut
if (is.null(numc)){
numr=numc=2}}
par(mfrow=c(numr,numc),yaxt="n")
tpolice <- par("cex") #pour le mtext
par(xpd=T,mar=par()$mar+c(0,1,0,0))
for (m in 1:mult) {
for (i in 1:((dim(dataset)[2])/(numr*numc))){                                        #création de nouvelles fenêtres graphiques si le nb de variables dépasse numr et numc
if (m == ((numr*numc)*i)+1){
x11()
par(mfrow=c(numr,numc),yaxt="n")}
}
k=0                                                                        #initialisation de k
for (i in 1:length(dataset[,X[m]])){                                     #pour chaque cellule du tableau de données, si NA alors incrémentation de k
if ((is.na(dataset[,X[m]])[[i]])==TRUE){
k=k+1}
}
na[m]=k/length(dataset[,X[m]])                                             #calcul du pourcentage de données manquantes (nb de NA sur nb total de cellules)
if (spl==TRUE){                                                               #si spl=T, tri par taille de bâton
coord=barplot(sort(table(dataset[,X[m]])),beside=TRUE,las=2,horiz=TRUE,main=names(dataset)[X[m]],col=col[(summ[m]-count_mod[m]+1:summ[m])])
text(x=2,y=coord,labels=names(sort(table(dataset[,X[m]]))),adj=0,cex=cex,col=colour)}
if(spl==FALSE){
coord=barplot(table(dataset[,X[m]]),beside=TRUE,las=2,horiz=TRUE,main=names(dataset)[X[m]],col=col[(summ[m]-count_mod[m]+1:summ[m])])  #sinon, tri par ordre alphabétique
text(x=2,y=coord,labels=levels(dataset[,X[m]]),adj=0,cex=cex,col=colour)}
mtext(paste(c("Percentage of missing values  =",round(na[m],2)*100,"%"),collapse=" "), side = 3, line=-0.1,cex=tpolice,adj=0)   #phrase : % de NA=...
}}
#ENbarplot(tea,c(names(tea[,-22])),spl=TRUE)
#ENbarplot(tea,c(names(tea[,-22])))
#ENbarplot(tea,c("price","sex","socio.professional.category","age_Q"))
#ENbarplot(tea,c("price","sex","socio.professional.category","age_Q"),spl=TRUE)
barplot_function(tea,20,spl=FALSE,numr=1,numc=1)
View(tea)
tea[1,]
tea[0:1,]
tea[0,]
tea[1,]
tea[1,1]
tea[1,1:2]
tea[1:2,1:2]
tea[1,1:5]
tea[1,1:10]
boxplot(tea[,20])
boxplot(data=tea[,20])
boxplot(20,data=tea)
data(mtcars)
mtcars
barplot
barplot(tea[,20])
barplot(20,tea[,20])
plot(tea[,20])
pdf(width=8,height=4.5)
plot(tea[,20])
dev.off()
plot(tea[,20])
plot(tea[,21])
pdf(width=8,height=4.5)
plot(tea[,20])
dev.off()
svg(width=8,height=4.5)
plot(tea[,20])
dev.off()
pdf(
)
dev.off()
svg(file="Rplots001.svg",width=8,height=4.5)
plot(tea[,20])
dev.off()
pdf(file="Rplots001.pdf",width=8,height=4.5)
plot(tea[,20])
dev.off()
barplot_function(tea,20,spl=FALSE,numr=1,numc=1)
pdf(file="Rplots002.pdf",width=8,height=4.5)
barplot_function(tea,20,spl=FALSE,numr=1,numc=1)
dev.off()
svg(file="Rplots002.svg",width=8,height=4.5)
barplot_function(tea,20,spl=FALSE,numr=1,numc=1)
dev.off()
XvsYbarplot("socio.professional.category","sex",tea,legend.text = TRUE)
"XvsYbarplot"=function (var1, var2, dataset, width = 1, space = NULL, names.arg = NULL,
legend.text = NULL, horiz = FALSE, density = NULL,
angle = 45, col = NULL, border = par("fg"), main = NULL,
sub = NULL, xlab = NULL, ylab = NULL, xlim = NULL, ylim = NULL,
xpd = TRUE, log = "", axes = TRUE, axisnames = TRUE, cex.axis = par("cex.axis"),
cex.names = par("cex.axis"), inside = TRUE, plot = TRUE,
axis.lty = 0, offset = 0, add = FALSE, ...)
{
dataset<- as.data.frame(dataset)
if (is.character(var1)& is.character(var2)){
num_var1 <- match(var1,names(dataset))
num_var2 <- match(var2,names(dataset))
height<-table(dataset[,num_var1],dataset[,num_var2])
}
else { height <- table(var1,var2)}
if (!missing(inside))
.NotYetUsed("inside", error = FALSE)
if (is.null(space))
space <- if (is.matrix(height))
c(0, 1)
else 0.2
space <- space * mean(width)
if (plot && axisnames && is.null(names.arg))
names.arg <- if (is.matrix(height))
colnames(height)
else names(height)
if (is.vector(height) || (is.array(height) && (length(dim(height)) ==
1))) {
height <- cbind(height)
if (is.null(col))
if (is.null(col))
col<-rep(0)
NR<-length(height)
max<-max(height)
for (i in 1:NR){
if (height[i]==max){ coli<-hsv(h=1,s=1,v=1,1)
col<-cbind(col,coli)}
else{
coli<-hsv(h=1,s=0.4+(height[i]/max)*0.6,v=1,1)
col<-c(col,coli)}
}
col<-col[-1]
}
else if (is.matrix(height)) {
if (is.null(col))
NR <- nrow(height)
NC <- ncol(height)
col=rep(0)
a<-1/NC
for(i in 1:NC){
max<-max(height[,i])
coli<-rep(0,NR)
for (j in 1:NR){
if (height[j,i]==max){
coli[j]<-hsv(h=a*i,s=1,v=1,1)
}
else {
coli[j]<-hsv(h=a*i,s=0.4+(height[j,i]/max)*0.6,v=1,1)
}
}
col<-c(col,coli)
}
col<-col[-1]
}
else stop("'height' must be a vector or a matrix")
if (is.logical(legend.text))
legend.text <- if (legend.text && is.matrix(height))
rownames(height)
stopifnot(is.character(log))
logx <- logy <- FALSE
if (log != "") {
logx <- length(grep("x", log)) > 0L
logy <- length(grep("y", log)) > 0L
}
if ((logx || logy) && !is.null(density))
stop("Cannot use shading lines in bars when log scale is used")
NR <- nrow(height)
NC <- ncol(height)
if (length(space) == 2)
space <- rep.int(c(space[2], rep.int(space[1], NR -
1)), NC)
width <- rep(width, length.out = NR)
offset <- rep(as.vector(offset), length.out = length(width))
delta <- width/2
w.r <- cumsum(space + width)
w.m <- w.r - delta
w.l <- w.m - delta
log.dat <- (logx && horiz) || (logy && !horiz)
if (log.dat) {
if (min(height + offset, na.rm = TRUE) <= 0)
stop("log scale error: at least one 'height + offset' value <= 0")
if (logx && !is.null(xlim) && min(xlim) <= 0)
stop("log scale error: 'xlim' <= 0")
if (logy && !is.null(ylim) && min(ylim) <= 0)
stop("log scale error: 'ylim' <= 0")
rectbase <- if (logy && !horiz && !is.null(ylim))
ylim[1]
else if (logx && horiz && !is.null(xlim))
xlim[1]
else 0.9 * min(height, na.rm = TRUE)
}
else rectbase <- 0
rAdj <- offset + (if (log.dat)
0.9 * height
else -0.01 * height)
delta <- width/2
w.r <- cumsum(space + width)
w.m <- w.r - delta
w.l <- w.m - delta
num_mod <- nlevels(var1)
if (horiz) {
if (is.null(xlim))
xlim <- range(rAdj, height + offset, na.rm = TRUE)
if (is.null(ylim))
ylim <- c(min(w.l), max(w.r) + num_mod + (num_mod-1))
}
else {
if (is.null(xlim))
xlim <- c(min(w.l), max(w.r))
if (is.null(ylim))
ylim <- range(rAdj, height + offset + num_mod*5, na.rm = TRUE)
}
w.m <- matrix(w.m, ncol = NC)
par(mar = par("mar") + c(1,0,0,0))
if (plot) {
opar <- if (horiz)
par(xaxs = "i", xpd = xpd)
else par(yaxs = "i", xpd = xpd)
on.exit(par(opar))
if (!add) {
plot.new()
if(horiz){
if (is.character(attributes(var1)$levels)==TRUE){
if (max(nchar(attributes(var1)$levels))>8){
par(mar = par("mar") + c(0,round(max(nchar(attributes(var1)$levels))/3),0,0))}
}
else {par(mar=par("mar")+c(0,5,0,0))}
plot.window(xlim, ylim, log = log, ...)
}
else  plot.window(xlim, ylim, log = log, ...)
}
xyrect <- function(x1, y1, x2, y2, horizontal = TRUE,
...) {
if (horizontal)
rect(x1, y1, x2, y2, ...)
else rect(y1, x1, y2, x2, ...)
}
xyrect(rectbase + offset, w.l, c(height) + offset,
w.r, horizontal = horiz, angle = angle, density = density,
col = col, border = border)
if (axisnames && !is.null(names.arg)) {
at.l <- if (length(names.arg) != length(w.m)) {
if (length(names.arg) == NC)
colMeans(w.m)
else stop("incorrect number of names")
}
else w.m
if (!horiz)
if (is.character(attributes(var1)$levels)==TRUE){
for (i in 1:nlevels(var2)){
if (nchar(attributes(var2)$levels[i]) > 11) names.arg[i] <- substring(attributes(var2)$levels[i],1,11)
}
}
if(horiz){
axis(2, at = at.l, labels = names.arg, lty=axis.lty,cex.axis = cex.names, las = 2)}
else {
axis(1, at = at.l, labels = names.arg, lty=axis.lty,cex.axis = cex.names, las = 0)}
}
if (!is.null(legend.text)) {
legend.col <- rep(col, length.out = length(legend.text))
if (!horiz)  {
legend.text <- legend.text
legend.col <- legend.col
density <- rev(density)
angle <- rev(angle)
}
num.legend <- c("1st","2nd","3rd")
for (i in 4:20){
num.legendi <- c(paste(i,"th"))
num.legend <- c(num.legend,num.legendi)}
num.legend <- num.legend[1:dim(height)[1]]
xy <- par("usr")
if (horiz){
legend2( xy[2] - xinch(0.1), xy[4] - yinch(0.1), legend = paste(num.legend,"bar:",legend.text),
angle = angle, density = density, fill = legend.col, bty="n", cex = 1 - 0.04*num_mod,
xjust = 1, yjust = 1)}
else {
legend2( xy[2] - xinch(0.1), xy[4] - yinch(0.1), legend = paste(num.legend,"bar:",legend.text),
angle = angle, density = density, fill = legend.col, bty="n",
xjust = 1, yjust = 1)}
}
if (is.character(var1)& is.character(var2)){
title(main = paste(names(dataset[num_var1]),"depending on", names(dataset[num_var2])), sub = sub, xlab = xlab, ylab = ylab,
...)}
else {
for (i in 1:length(dataset)){
a <- match(var1,dataset[,i])
b <- match(var2,dataset[,i])
if (any(is.na(a)) == FALSE){ rep1=i}
if (any(is.na(b)) == FALSE){ rep2=i}
}
title(main = paste(names(dataset[rep1]),"depending on", names(dataset[rep2])), sub = sub, xlab = xlab, ylab = ylab,
...)}
if (axes)
if (horiz){
axis(1, cex.axis = cex.axis, las = 0, ...)}
else { axis(2, cex.axis = cex.axis, las = 2, ...)}
invisible(w.m)
}
else w.m
}
#barplot2(var1="Sport",var2="age_Q",tea,legend.text=TRUE,horiz=TRUE)
#X11()
#barplot2(var1=tea[,18],var2=tea[,20],tea,legend.text=TRUE,cex.names=1,horiz=TRUE)
XvsYbarplot("socio.professional.category","sex",tea,legend.text = TRUE)
svg(file="Rplots003.svg",width=8,height=4.5)
XvsYbarplot("socio.professional.category","sex",tea,legend.text = TRUE)
dev.off()
pdf(file="Rplots003.pdf",width=8,height=4.5)
XvsYbarplot("socio.professional.category","sex",tea,legend.text = TRUE)
dev.off()
chisq.desc(tea,13:17,31:35)
pdf(file="Rplots004.pdf",width=8,height=4.5)
chisq.desc(tea,13:17,31:35)
dev.off()
svg(file="Rplots004.svg",width=8,height=4.5)
chisq.desc(tea,13:17,31:35)
dev.off()
svg(file="Rplots004.svg",width=8,height=4.5)
chisq.desc(tea,13:17,31:35)
dev.off()
png(file="Rplots004.png",width=8,height=4.5)
chisq.desc(tea,13:17,31:35)
dev.off()
ENMCA(tea[,1:18])
table("socio.professional.category","sex",tea,legend.text = TRUE)
table(tea["socio.professional.category"],tea["sex"])
tea["socio.professional.category"]
table(tea["socio.professional.category"],tea["sex"])
cross <- table(tea["socio.professional.category"],tea["sex"])
prop.table(cross)
prop.table(cross,1)
prop.table(cross,2)
install.packages("prettyR")
library(prettyR)
freq(tea)
ftable(xtabs(cbind(ncases, ncontrols) ~ agegp, data = esoph))
table(tea["shape"],tea["refined"])
esoph
cbind(ncases, ncontrols)
UCBAdmissions
freq(tea)
esoph
table(tea)
table(tea["shape"],tea["refined"],tea["slimming"])
tea["shape"]
table(state.division, state.region)
state.division
tea[,1]
tea[,16]
table(tea[,16], tea[,31])
cross <- table(tea[,16], tea[,31])
prop.table(cross)
prop.table(cross,1)
prop.table(cross,2)
table(tea[,16], tea[,31], tea[,32])
table(tea[,16], tea[,31])
prop.table(table(tea[,16], tea[,31]))
prop.table(table(tea[,16], tea[,31]),1)
prop.table(table(tea[,16], tea[,31]),2)
table(tea[,16], tea[,32])
prop.table(table(tea[,16], tea[,32]))
prop.table(table(tea[,16], tea[,32]),1)
prop.table(table(tea[,16], tea[,32]),2)
table(tea[,15], tea[,33])
prop.table(table(tea[,15], tea[,33]))
prop.table(table(tea[,15], tea[,33]),1)
prop.table(table(tea[,15], tea[,33]),2)
load("~/Documents/ISD/artifacts/r/belgium.rData")
belgium
lm(V2~V1,belgium)
rq(V2~V1,data=belgium)
require(quantreg)
rq(V2~V1,data=belgium)
library(quantreg)
rq(V2~V1,data=belgium)
pdf(file="Rplots002.pdf",width=8,height=4
c
?source
coltable
library(EnQuireR)
coltable
chisq.desc(tea,13:17,31:35)
forecast(ausbeer, h=4)
library(fpp2)
install.packages("fpp2")
ausbeer
library(fpp2)
ausbeer
window(ausbeer,start=1992,end=c(2007,4))
autoplot(window(ausbeer,start=1992,end=c(2007,4)))
# Set training data from 1992 to 2007
beer2 <- window(ausbeer,start=1992,end=c(2007,4))
# Plot some forecasts
autoplot(beer2) +
autolayer(meanf(beer2, h=11),
series="Mean", PI=FALSE) +
autolayer(naive(beer2, h=11),
series="Naïve", PI=FALSE) +
autolayer(snaive(beer2, h=11),
series="Seasonal naïve", PI=FALSE) +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
beer2
plot(beer2)
beer2 <- window(ausbeer,start=1992,end=c(2007,4))
meanf(beer2, h=11)
meanf(beer2, h=1)
meanf(window(ausbeer,start=1992,end=c(2007,4)),h=11)
naive(window(ausbeer,start=1992,end=c(2007,4)),h=11)
snaive(window(ausbeer,start=1992,end=c(2007,4)),h=11)
forecast(window(ausbeer,start=1992,end=c(2007,4)),h=11)
load("~/Documents/ISD/artifacts/r/tea.rda")
View(tea)
tea
tea
tea(1,1)
tea[1,1]
tea[1,]
tea[,1]
tea[1:3,]
tea[,20]
plot(tea[,20])
plot?
c
?plot
install.packages("RFreak")
library(RFreak)
library(rJava)
robreg.evol
library(rJava)
install.packages("rJava")
library("rJava", lib.loc="~/Library/R/3.5/library")
library("rmarkdown", lib.loc="~/Library/R/3.5/library")
detach("package:rmarkdown", unload=TRUE)
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="~/Library/R/3.5/library")
install.packages("d3treeR")
library(d3treeR)
install.packages("d3tree")
install.packages("d3Tree")
tea
pwd
write.table(tea,"tea.csv")
dim(tea)
write.csv(tea,"tea.csv")
tea.head()
tea[0,]
tea[2,]
tea[1,]
write.csv(tea,"tea.csv",row.names = FALSE, column.names = TRUE)
write.csv(tea,"tea.csv",row.names = FALSE, col.names = TRUE)
write.csv(tea,"tea.csv",row.names = FALSE)
test = read.csv("./ISD/artifacts/csv/tea.csv")
test
test[0,]
belgium
write.csv("belgium.csv")
write.csv(belgium,"belgium.csv")
write.csv(belgium,"belgium.csv",col.names= FALSE)
write.csv(belgium,"belgium.csv",row.names= FALSE)
install.packages("devtools")
install.packages("roxygen2")
setwd("~/Coding/Repos/RFreak")
load_all(".")
library(devtools)
load_all(".")
